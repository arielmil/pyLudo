- Módulos:

	- Banco de Dados:

		- Objetivo: Registrar dados gerais sobre o jogo, como cadastro de jogadores e registro de partida.

 		- Funções:

			- Salva_jogador: Salva o nome do usuário que foi cadastrado pela função Cria_jogador do modulo Player.
			- Salva_partida: Salva o historico da partida e o placar dela.

	- Dados:
		
		- Objetivo: Prover a aplicação toda a funcionalidade necessária para simular o objeto Dado do jogo.

		- Funções: 
			- Cria_dado: função que recebe a cor do jogador, pois a mesma será relacionada com a cord do dado. Cria um dicionário dado que retorna o dicionário com número do dado e uma lista de sprites, cada elemento dessa lista é o número do dado.
				
			- Clica_dado: Implementa a função Randint da biblioteca Random. Retorna um número inteiro pseudo-randomizado de 1 (incluído) a 6 (incluído).
			 	

	- Graphics:

		- Objetivo: Cuida de toda a parte da interface gráfica com o auxílio da biblioteca "pygames"

		- Funções:

			- pygames.init: Função própria da biblioteca “pygames”, inicializa as funções para a interface gráfica.

			- Inicia_telas: Envia para o pygames os parametros necessários para inicializar e posteriormente renderizar a interface gráfica.

			- Desenha_jogo: Recebe uma lista composta por sublistas aonde o índice 0 de uma sublista contêm uma referência a uma imagem a ser renderizada, o segundo índice da sublista contem a posição x da imagem a ser renderizada, e o terceiro índice da sublista contem a posição y da imagem a ser renderizada. Renderiza as imagens recebidas nessa lista em suas respectivas posições x e y.

			- Aonde_clicou: Retorna as posições x e y aonde o jogador clicou na tela. Chama as funções necessárias para serem usadas de acordo com os eventos da aplicação que requerem cliques em lugares ou momentos específicos.
			
			- Renderiza_tela_quantos_jogam(): Implementa e renderiza na tela a interface que permite a um jogador selecionar quantos jogadores irão jogar nesta partida. Retorna um número de 2 a 4 referente ao número de jogadores.
			
			- Desenha_peão: Deve ser usada sendo chamada por Desenha_jogo. De acordo com os valores de posição final do peão(ultima posição que ele deve estar, posição que ele está no sistema) e posição atual do peão(posição que ele esta sendo exibido na tela), ela desenha a movimentação do peão, ou caso a posição final do peão seja igual a sua posição atual, ele é mostrado parado.
			
			- Desenha_tabuleiro: Deve ser usada sendo chamada por Desenha_jogo. Implementa toda a funcionalidade necessária para desenhar o tabuleiro. Deve ser usada em conjunto com Roda_tabuleiro.
			
			- Desenha_dado: Deve ser usada sendo chamada por Desenha_jogo. Implementa toda a funcionalidade necessária para desenhar o dado.



	- Main:

		- Objetivo: Inicializa a aplicação como um todo provendo todos os dados necessários para que todos as funcionalidades da aplicação existentes nos outros módulos possam começar a funcionar. Contêm toda a lógica para que a aplicação possa começar a funcionar.

		- Funções: 

			- Quantos_jogam: Permite que o jogador que iniciou o jogo selecione quantos jogadores irão jogar, assim como selecionar as cores que os representam. Entra em um loop para criar a quantidade de jogadores selecionados representados por objetos de Player com seus respectivos nomes. Repete o processo de seleção de cor para um jogador, até que seja digitada uma cor válida, e printa um erro caso o contrário. Mantém-se no loop até que todos os jogadores selecionarem uma cor válida, ou digitem "sair" ou "Sair" ou "SAIR", na seleção de cor ou nome, nesse caso printa uma mensagem adequada e sai do jogo. Retorna um array com um numero de indices entre 2 e 4 representando cada jogador, aonde cada indice contém um sub_array tendo em seu primeiro indice um objeto player, e no seu segundo indice a cor selecionada.
			

	- Partida:

		- Objetivo: Este módulo é o game manager, isto é: Gerencia a parte principal do jogo.

		- Funções:
		
			- Inicia_partida: Cuida da parte lógica para que uma partida do jogo possa ser jogada.

			- Gerência_Partida: Implementa a funcionalidade de troca de turnos

			- Roda_tabuleiro: rotaciona o tabuleiro em 90 graus re calculando as posições de todos os elementos do tabuleiro, após isso chama a função Tabuleiro_animation() do módulo Tabuleiro, para isso recalculamos a posição de cada casa(canto superior esquerdo da mesma), ultilizando o seguinte algoritimo: [x = (tamanho_y_do_tabuleiro - tamanho_x_da_casa) - y; y = x.

			- Cria_torre: Implementa no jogo os objetos Torre e Semi-Torre. É chamada sempre após Move_peão(). Recebe como argumento o peão que acabou de ser movido, e verifica através dele se ele está em uma casa com algum outro peão da mesma cor. Caso sim, cria o objeto Semi-Torre. Caso ele esteja em uma casa que já tem uma Semi-Torre, uma Torre é Criada no lugar dela. Caso ele esteja em uma casa sem nenhum outro peão, retorna 0.

			- Captura_peão: É chamada sempre após Move_peão(). Recebe como argumento o peão que acabou de ser movido, e verifica através dele se ele está em uma casa com algum outro peão de outra cor, cajo esteja, Manda_para_casa() sera executada como esse outro peão como argumento. Retorna 0 Caso um peão seja capturado, 1 caso contrário, e -1 em caso de erro.
			
			- Desmancha_torre: ver

			- Manda_para_casa: É chamada sempre após a função Captura_peça. faz com que o peão capturado retorne para sua posição inicial. Retorna 0 case rode com sucerro, e -1 caso contrário.
			
			- Roda_dado: Faz um jogador jogue o Dado. Para isso, utiliza a função Joga_dado() do módulo Dado, caso o jogador clique no icone do Dado.
			
			- Escolhe_peão: Permite que o jogador escolha um peão retornando um número inteiro de 0 (incluso) a 3 (incluso) de forma a qual cada número está associado a um dos 4 peões, caso o jogador clique no peão desejado.
			
			- Escollhe_cor: Associa uma cor a uma instância de jogador.


	- Peão:

		- Objetivo: Prover a aplicação toda a funcionalidade necessária para simular o objeto Peão do jogo.

		- Funções:

			- Cria_peao: função que recebe a cor do peao, que é referente ao jogador, e a posição inicial. Retorna um dicionario peao com as informações úteis para o jogo (cor, posição atual, posição final e sprite).

			- Move_peão: Recebe um valor da função "Joga_dado" do módulo Dado, e informa ao peão escolhido a próxima casa que ele "está", sua posição final, correspondente com o valor recebido.
	

	- Player: 

		- Objetivo: Prover a interface necessária para que o jogador interaja com o jogo.

		- Funções: 

			- Cria_jogador: Para ser usado em conjunto com o banco de dados: Entra em um loop até que seja digitada uma sequência de caracteres que será o nome do jogador. Retorna um dicionario chamado jogador com um campo nome, ou -1 caso não seja digitado nada (Caso decida-se sair do loop).


	- Tabuleiro:
		
		- Objetivo: Prover a aplicação toda a funcionalidade necessária para simular o Tabuleiro do jogo.

		- Funções:
		

			- Cria_tabuleiro_vazio: Utilizado pela função Cria_tabuleiro, esta função cria e retorna um array de 58 indices com todos os valores de seus indices iguais a [] (lista vazia).

			- Cria_casa: Recebe como parâmetro um ou dois valores inteiros (x e y). Cria e retorna um dicionario chamado Casa representando uma casa do tabuleiro com suas coordenadas x e y iguais aos parametros recebidos, além de que Casa terá também os campos: "peoes" (uma lista que mantem registro dos peões nessa casa), "semi_torres" (uma lista que mantem registro das semi torres nessa casa), e "torres" (uma lista que mantem registro das torres nessa casa), todos iguais a [] (lista vazia). Retorna -1 e printa uma mensagem de erro caso não sejam recebidos x e y.

			- Cria_casas: Recebe como parâmetros: Uma casa como posição inicial, o número de casas que irá criar, a distância em x ou y entre duas casas, a direção e o sentido que irá seguir. Utilizando a função Cria_Casa(), esta função cria com seus valores x ou y sequencialmente uma ou mais casas, seguindo pela direção (vertical ou horizontal) e pelo sentido  (negativo se igual a -1 , e positivo caso o contrário). Retorna um array de casas, ou -1 em caso de erro.

			- Cria_tabuleiro: Recebe como parâmetros: Uma casa como posição inicial, e a distancia em x ou y entre duas casas, além de um parametro opcional booleano chamado debugging. Cria utilizando sequencialmente a função Cria_Casas() todas as casas necessárias para o tabuleiro poder ser usado com seus valores x e y. Retorna um array de 58 Casas representando o tabuleiro. Caso debugging seja diferente de False, printa utilizando a função Printa_tabuleiro todas as casas do tabuleiro criado.
